{
  "name": "还没好好感受年轻就老了...",
  "tagline": "Android使用Html绘制页面",
  "body": "今天给大家分享一个有意思的东西，android本身提供的布局已经非常完善，但是如果绘制过于复杂的页面会很麻烦，webView控件一般用来加载网页，同时我们也可以尝试加载本地的html文件，下面给大家介绍一个简单的Demo；\r\n\r\n    1.附上一个文件，mainTest.html,建议大家在自己电脑上新建个.txt文本文件，将Html内容放入里面，再将.txt文件修改成.html文件，完成之后将该文件放入asset文件夹下，如果有附属的；\r\n复制代码\r\n\r\n<html>\r\n<script language=\"javascript\">\r\n    /* This function is invoked by the activity */\r\n    /* 这个函数被Activity调用的活动 这里的图片我们可以在它的连接里面下载 android_waving.png */\r\n    function wave() {\r\n    /* 这里是一个javascript 自定义函数，这是由我们在android的程序里调用的，不在在HTML中调用*/\r\n    document.getElementById(\"droid\").src=\"ic_launcher.png\";\r\n    }\r\n    function hellow(){\r\n        alert('hellow world');\r\n    document.getElementById(\"droid\").src=\"ic_launcher.png\";\r\n    }\r\n</script>\r\n<body>\r\n<!-- Calls into the javascript interface for the activity -->\r\n<!-- 从HTML文件中调用activity中的函数 -->\r\n<!-- 也就是从HTML到android程序 留意window.demo.clickOnAndroid()这句话 -->\r\n<a onClick=\"window.asdasd.clickOnAndroid()\">\r\n    <div style=\"width:80px;\r\n                        margin:0px auto;\r\n                        padding:10px;\r\n                        text-align:center;\r\n                        border:2px solid #202020;\">\r\n        <!-- 图片默认的为 android_normal.png -->\r\n        <img id=\"droid\" src=\"android_normal.png\"/><br>\r\n        Click me!\r\n    </div>\r\n</a>\r\n<br>\r\n<button onclick=\"window.my.show()\">click</button>\r\n</body>\r\n</html>\r\n\r\n复制代码\r\n\r\n    我自己不了解HTML，上部分参考就就OK，如果有附属的.css和.js文件就一并复制；\r\n\r\n   2.Activity调用  这部分我会详细介绍\r\n\r\n    ①XML布局\r\n复制代码\r\n\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\r\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\r\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\r\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\r\n    tools:context=\".MainActivity\" >\r\n\r\n    <WebView\r\n        android:id=\"@+id/webView\"\r\n        android:layout_width=\"fill_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</RelativeLayout>\r\n\r\n复制代码\r\n\r\n    ② Activity代码\r\n复制代码\r\n\r\npackage com.example.androidhtmldemo;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.webkit.JsResult;\r\nimport android.webkit.WebChromeClient;\r\nimport android.webkit.WebSettings;\r\nimport android.webkit.WebView;\r\nimport android.widget.Toast;\r\n\r\n@SuppressLint(\"JavascriptInterface\") public class MainActivity extends Activity {\r\n    /**\r\n     * Called when the activity is first created.\r\n     */\r\n//    @Override\r\n//    public void onCreate(Bundle savedInstanceState) {\r\n//        super.onCreate(savedInstanceState);\r\n//        setContentView(R.layout.main);\r\n//    }\r\n    private static final String LOG_TAG = \"WebViewDemo\";\r\n    private WebView mWebView;\r\n    private Handler mHandler = new Handler();\r\n    @SuppressLint(\"JavascriptInterface\") @Override\r\n    public void onCreate(Bundle icicle) {\r\n        super.onCreate(icicle);\r\n        setContentView(R.layout.activity_main);\r\n        Toast.makeText(MainActivity.this,\"HELLOW WORLD\", Toast.LENGTH_LONG).show();\r\n\r\n        mWebView = (WebView) findViewById(R.id.webView);\r\n\r\n\r\n        WebSettings webSettings = mWebView.getSettings();\r\n        webSettings.setSavePassword(false);\r\n        webSettings.setSaveFormData(false);\r\n        // 下面的一句话是必须的，必须要打开javaScript不然所做一切都是徒劳的\r\n        webSettings.setJavaScriptEnabled(true);\r\n        webSettings.setSupportZoom(false);\r\n\r\n\r\n        mWebView.setWebChromeClient(new MyWebChromeClient());\r\n\r\n        // 看这里用到了 addJavascriptInterface 这就是我们的重点中的重点\r\n        // 我们再看他的DemoJavaScriptInterface这个类。还要这个类一定要在主线程中\r\n        mWebView.addJavascriptInterface(new DemoJavaScriptInterface(), \"asdasd\");\r\n        mWebView.addJavascriptInterface(new myHellowWorld(),\"my\");\r\n\r\n        mWebView.loadUrl(\"file:///android_asset/main.html\");\r\n    }\r\n\r\n    class myHellowWorld{\r\n        myHellowWorld(){\r\n\r\n        }\r\n        public void show(){\r\n            mHandler.post(new Runnable(){\r\n\r\n            @Override\r\n            public void run() {\r\n                Toast.makeText(MainActivity.this,\"HELLOW WORLD\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n        }\r\n    }\r\n    // 这是他定义由 addJavascriptInterface 提供的一个Object\r\n    final class DemoJavaScriptInterface {\r\n        DemoJavaScriptInterface() { \r\n        }\r\n\r\n        /**\r\n         * This is not called on the UI thread. Post a runnable to invoke\r\n         * 这不是呼吁界面线程。发表一个运行调用\r\n         * loadUrl on the UI thread.\r\n         * loadUrl在UI线程。\r\n         */\r\n        public void clickOnAndroid() {        // 注意这里的名称。它为clickOnAndroid(),注意，注意，严重注意\r\n            mHandler.post(new Runnable() {\r\n                public void run() {\r\n                    // 此处调用 HTML 中的javaScript 函数\r\n                    mWebView.loadUrl(\"javascript:wave()\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n// 线下的代码可以不看，调试用的\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * Provides a hook for calling \"alert\" from javascript. Useful for\r\n     * 从javascript中提供了一个叫“提示框” 。这是很有用的\r\n     * debugging your javascript.\r\n     *  调试你的javascript。\r\n     */\r\n    final class MyWebChromeClient extends WebChromeClient {\r\n        @Override\r\n        public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\r\n            Log.d(LOG_TAG, message);\r\n            result.confirm();\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n复制代码\r\n\r\n   ③相关类及方法\r\n\r\n　　  addJavaScriptInterface 这个方法非常重要，通过它来实现我们的代码和HTML实现交互，需要传递两个参数，第一个参数：\r\n\r\n          .绑定到JavaScript的类的实例，这个类有两地啊要说明：1）类中的方法如果需要HTML调用则必须方法名必须与HTML中保持一致 2）HTML和我们的Project若要实现交互必须建立新的线程，使用handler来更新我们的代码，可以想见代码；\r\n\r\n          .用来显示在JavaScript中的实例，简单的说就是与第一个参数绑定的标签，在HTML中可以通过这个标签来调用第一个参数所拥有的方法；\r\n\r\n       loadUrl   1）加载网页 ：loadUrl(\"http://www.baidu.com/\"); \r\n\r\n                    2）加载SD卡内资源：loadUrl(\"file:///mnt/sdcard/Google.html\");\r\n\r\n                    3）加载assets文件夹内资源 ：loadUrl(\"file:///android_asset/Google.html\"); \r\n\r\n    android使用HTML今天就介绍到这，欢迎大家交流~",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}